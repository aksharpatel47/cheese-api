// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Model to store brand information

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  Cheese    Cheese[]
}

// Model to store cheese type information
// cheese type and cheese have many to many relationship

model CheeseType {
  id                   Int                    @id @default(autoincrement())
  name                 String
  url                  String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime?              @updatedAt
  deletedAt            DateTime?
  Cheese               Cheese[]
  CheeseAndCheeseTypes CheeseAndCheeseTypes[]
}

// Model to store cheese information

model Cheese {
  id                   Int                    @id @default(autoincrement())
  name                 String
  url                  String
  brandId              Int
  brand                Brand                  @relation(fields: [brandId], references: [id], onDelete: Restrict)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime?              @updatedAt
  deletedAt            DateTime?
  CheeseTypes          CheeseType[]
  CheeseAndCheeseTypes CheeseAndCheeseTypes[]
}

// Model to store cheese type and cheese relationship information

model CheeseAndCheeseTypes {
  id           Int        @id @default(autoincrement())
  cheeseId     Int
  cheese       Cheese     @relation(fields: [cheeseId], references: [id], onDelete: Cascade)
  cheeseTypeId Int
  cheeseType   CheeseType @relation(fields: [cheeseTypeId], references: [id], onDelete: Cascade)

  // create unique index on cheeseId and cheeseTypeId
  @@unique([cheeseId, cheeseTypeId])
}

// Model to store user information with email and password

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}
